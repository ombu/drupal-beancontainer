<?php

/**
 * @file
 * Bean container module.
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_bean_types_api_info().
 */
function bean_container_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function bean_container_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'bean_container') . '/includes';

  $plugins['bean_container'] = array(
    'label' => t('Block Container'),
    'handler' => array(
      'class' => 'BeanContainer',
      'parent' => 'BeanPlugin',
      'path' => $plugin_path,
      'file' => 'BeanContainer.php',
    ),
    'file' => 'BeanContainer.php',
    'path' => $plugin_path,
    'editable' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_menu().
 */
function bean_container_menu() {
  $items = array();

  $items['block/%bean_delta/manage-children'] = array(
    'title' => 'Manage Children',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bean_container_manage_children', 1),
    'access callback' => 'bean_container_menu_access',
    'access arguments' => array(1),
    'file' => 'bean_container.admin.inc',
  );

  $items['block/%bean_delta/manage-children/add-block'] = array(
    'title' => 'Add block',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bean_container_add_block', 1),
    'access callback' => 'bean_container_menu_access',
    'access arguments' => array(1),
    'file' => 'bean_container.admin.inc',
  );


  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function bean_container_admin_paths() {
  $paths = array(
    'block/*/add-block' => TRUE,
    'block/*/manage-children' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_theme().
 */
function bean_container_theme($existing, $type, $theme, $path) {
  return array(
    'bean_container_manage_children' => array(
      'render element' => 'form',
    ),
    'bean_container_simple' => array(
      'variables' => array('children' => NULL, 'display_type' => NULL, 'parent' => NULL),
    ),
    'bean_container_tabs' => array(
      'variables' => array('children' => NULL, 'display_type' => NULL, 'parent' => NULL),
    ),
    'bean_container_item' => array(
      'variables' => array('item' => NULL, 'title' => TRUE),
    ),
  );
}

/**
 * Menu access callback for add a block form.
 */
function bean_container_menu_access($bean) {
  return $bean->type == 'bean_container' && bean_access('edit', $bean);
}

/**
 * Theme an individual container item.
 */
function theme_bean_container_item($variables) {
  $child = $variables['item'];

  if ($child) {
    $content = $child->view();

    $content['#prefix'] = '<div class="' . drupal_clean_css_identifier($child->type) . '">';

    if ($variables['title'] && !empty($child->title)) {
      $content['#prefix'] .= '<h2>' . $child->title . '</h2>';
    }

    $content['#suffix'] = '</div>';

    return drupal_render($content);
  }
}

/**
 * Theme a simple bean container.
 */
function theme_bean_container_simple($variables) {
  $output = '';
  foreach ($variables['children'] as $key => $child) {
    $output .= theme('bean_container_item', array('item' => $child));
  }

  return $output;
}

/**
 * Theme a tabbed bean container.
 *
 * Use the simple bean container theme and let themes implement their own tabbed
 * interfaces.
 */
function theme_bean_container_tabs($variables) {
  return theme('bean_container_simple', $variables);
}

/**
 * Implements hook_entity_delete().
 */
function bean_container_entity_delete($entity, $type) {
  // Delete bean children when deleting container.
  // @todo: should probably make this configurable.
  if ($type == 'bean' && $entity->type == 'bean_container') {
    foreach ($entity->children as $child) {
      if ($bean = bean_load($child)) {
        bean_delete($bean);
      }
    }
  }
}

/**
 * Implements hook_bean_container_styles().
 */
function bean_container_bean_container_styles() {
  return array(
    'simple' => array(
      'label' => t('Invisible Container'),
      'theme_function' => 'bean_container_simple',
    ),
    'tab' => array(
      'label' => t('Tabbed Panel'),
      'theme_function' => 'bean_container_tabs',
    ),
  );
}

/**
 * API functions.
 */

/**
 * Return the available bean types to include in a bean container.
 */
function bean_containers_get_types() {
  $types = &drupal_static(__FUNCTION__, array());

  if (empty($types)) {
    $_types = bean_get_types();
    foreach ($_types as $k => $v) {
      if (user_access("edit any $k bean")) {
        $types[$k] = $v->getLabel();
      }
    }
    drupal_alter('bean_containers_types', $types);
  }

  return $types;
}
/**
 * Get bean container styles
 *
 * $style The style key. If empty, returns all styles
 */
function bean_container_get_style($style = NULL) {
  $styles = module_invoke_all('bean_container_styles');
  if ($style) {
    return $styles[$style];
  }
  else {
    return $styles;
  }
}
