<?php

/**
 * @file
 * Bean container module.
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_bean_types_api_info().
 */
function bean_container_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function bean_container_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'bean_container') . '/includes';

  $plugins['bean_container'] = array(
    'label' => t('Block Container'),
    'handler' => array(
      'class' => 'BeanContainer',
      'parent' => 'BeanPlugin',
      'path' => $plugin_path,
      'file' => 'BeanContainer.php',
    ),
    'file' => 'BeanContainer.php',
    'path' => $plugin_path,
    'editable' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_menu().
 */
function bean_container_menu() {
  $items = array();

  $items['block/%bean_delta/add-block'] = array(
    'title' => 'Add Block to Container',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'bean_container_add_tile',
    'page arguments' => array(1),
    'access callback' => 'bean_container_menu_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Menu access callback for add a block form.
 */
function bean_container_menu_access($bean) {
  return $bean->type == 'bean_container' && bean_access('edit', $bean);
}

/**
 * Implements hook_admin_paths().
 */
function bean_container_admin_paths() {
  return array(
    'block/*/add-block' => TRUE,
  );
}

/**
 * Page callback for container add block contextual link.
 *
 * Redirects user to tiles add block form with appropriate layout id.
 */
function bean_container_add_tile($bean) {
  // Keep user in overlay.
  $url = 'admin/tiles/add/bean_container/' . $bean->delta;
  if (module_exists('overlay') && overlay_get_mode() == 'child') {
    // Fix Safari bug that improperly redirects destination if destination is
    // the front page (e.g. node/1 will be redirected to / but loose overlay
    // context).
    if ($_GET['destination'] == variable_get('site_frontpage', '')) {
      $_GET['destination'] = '<front>';
    }
    overlay_close_dialog($_GET['destination'], array(
      'fragment' => 'overlay=' . urlencode($url . '?destination=' . $_GET['destination']),
      'absolute' => TRUE,
    ));
  }
  else {
    drupal_goto($url, array('query' => array('destination' => $_GET['destination'])));
  }
}

/**
 * Implements hook_theme().
 */
function bean_container_theme() {
  return array(
    'bean_container_tabs' => array(
      'variables' => array('children' => NULL, 'parent' => NULL),
    ),
  );
}

/**
 * Implements hook_tiles_container_info().
 */
function bean_container_tiles_container_info() {
  return array(
    'bean_container' => 'TilesBeanContainer',
  );
}

/**
 * Theme a tabbed bean container.
 *
 * Use the simple bean container theme and let themes implement their own tabbed
 * interfaces.
 */
function theme_bean_container_tabs($variables) {
  return drupal_render($variables['children']);
}

/**
 * Implements hook_bean_style_info().
 */
function bean_container_bean_style_info() {
  return array(
    'bean_container' => array(
      'label'          => 'Stacked',
      'class'          => 'BeanStyleBeanContainer',
      'bean_types'     => array(
        'bean_container',
      ),
    ),
    'bean_container_tabbed' => array(
      'label'          => 'Tabbed (horizontal)',
      'class'          => 'BeanStyleBeanContainerTabbed',
      'bean_types'     => array(
        'bean_container',
      ),
    ),
  );
}

/**
 * Implements hook_bean_style_options_alter().
 */
function bean_container_bean_style_options_alter(&$options, $context) {
  if ($context['bean']->type == 'bean_container') {
    unset($options['']);
  }
}
